CREATE TABLE IF NOT EXISTS Social_Details(     id_socdet Int (11) Unsigned Auto_increment NOT NULL,     firstname Varchar (25),     lastname Varchar (50),     gender Boolean,     birthaddr Varchar (50),     birthZipCode Varchar (5),     birthDate DATE,     phoneNumber Varchar (10),     picture Varchar (100),     id_medrec Int Unsigned,     id_doc Int Unsigned,     PRIMARY KEY (id_socdet),     UNIQUE (phoneNumber) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Patient_Medical_Record(     id_medrec Int (11) Unsigned Auto_increment NOT NULL,     height TinyINT Unsigned,     weight TinyINT Unsigned,     socialSecurityNumber Varchar (13),     id_socdet Int Unsigned,     id_blgrp Int Unsigned,     id_doc Int Unsigned,     id_gpsc Int Unsigned,     id_addr Int Unsigned,     PRIMARY KEY (id_medrec),     UNIQUE (socialSecurityNumber) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Blood_Group(     id_blgrp Int (11) Unsigned Auto_increment NOT NULL,     groupname Varchar (3),     PRIMARY KEY (id_blgrp),     UNIQUE (groupname) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Doctor(     id_doc Int (11) Unsigned Auto_increment NOT NULL,     CDHP Varchar (25),     id_socdet Int Unsigned,     id_gpsc Int Unsigned,     PRIMARY KEY (id_doc),     UNIQUE (CDHP) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Profession_Type(     id_prtyp Int (11) Unsigned Auto_increment NOT NULL,     name Varchar (50),     PRIMARY KEY (id_prtyp),     UNIQUE (name) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS GPS_Coordinates(     id_gpsc Int (11) Unsigned Auto_increment NOT NULL,     longitude Varchar (25),     latitude Varchar (25),     id_medrec Int Unsigned,     id_doc Int Unsigned,     PRIMARY KEY (id_gpsc) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Appointement(     id_appoi Int (11) Unsigned Auto_increment NOT NULL,     date_appoi Date,hours_appoi TIME,id_diag Int Unsigned, id_gpsc Int Unsigned,     id_medrec Int Unsigned,     id_doc Int Unsigned,     id_addr Int Unsigned,     PRIMARY KEY (id_appoi) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Address (id_addr Int (11) Unsigned Auto_increment NOT NULL,     number TinyINT Unsigned,     street Varchar (50),     zipcode Smallint Unsigned,     PRIMARY KEY (id_addr) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Medical_Site(     id_medsite Int (11) Unsigned Auto_increment NOT NULL,     name Varchar (25),     id_addr Int Unsigned,     PRIMARY KEY (id_medsite) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Doctor_Diagnostic(     id_diag Int (11) Unsigned Auto_increment NOT NULL,     title Varchar (25),     report Text,     gravityGrade TinyINT Unsigned,     date_diag Date,     id_medrec Int Unsigned,     id_doc Int Unsigned,     is_genetic BOOLEAN NOT NULL DEFAULT 0,     is_allergy BOOLEAN NOT NULL DEFAULT 0,     PRIMARY KEY (id_diag) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Tags(     id_tags Int (11) Unsigned Auto_increment NOT NULL,     name Varchar (50),     type Varchar (50),     PRIMARY KEY (id_tags),     UNIQUE (name) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Imagery(     id_img Int (11) Unsigned Auto_increment NOT NULL,     name Varchar (50),     image Varchar (100),     id_diag Int Unsigned,     PRIMARY KEY (id_img) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS Numerical(     id_num Int (11) Unsigned Auto_increment NOT NULL,     name Varchar (25),     value Int,     id_diag Int Unsigned,     PRIMARY KEY (id_num) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS practice(     id_doc Int Unsigned NOT NULL,     id_prtyp Int Unsigned NOT NULL,     PRIMARY KEY (id_doc, id_prtyp) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS belong(     id_medsite Int Unsigned NOT NULL,     id_doc Int Unsigned NOT NULL,     PRIMARY KEY (id_medsite, id_doc) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS to_describe(     id_diag Int Unsigned NOT NULL,     id_tags Int Unsigned NOT NULL,     PRIMARY KEY (id_diag, id_tags) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS provide(     id_tags Int Unsigned NOT NULL,     id_medsite Int Unsigned NOT NULL,     PRIMARY KEY (id_tags, id_medsite) ) ENGINE = InnoDB;
CREATE TABLE IF NOT EXISTS have_relatives_with(     id_medrec_child Int Unsigned NOT NULL,     id_medrec_father Int Unsigned NOT NULL,     PRIMARY KEY (id_medrec_child, id_medrec_father) ) ENGINE = InnoDB;
ALTER TABLE     Social_Details ADD     CONSTRAINT FK_Social_Details_id_medrec FOREIGN KEY (id_medrec) REFERENCES Patient_Medical_Record(id_medrec);
ALTER TABLE     Social_Details ADD     CONSTRAINT FK_Social_Details_id_doc FOREIGN KEY (id_doc) REFERENCES Doctor(id_doc);
ALTER TABLE     Patient_Medical_Record ADD     CONSTRAINT FK_Patient_Medical_Record_id_socdet FOREIGN KEY (id_socdet) REFERENCES Social_Details(id_socdet);
ALTER TABLE     Patient_Medical_Record ADD     CONSTRAINT FK_Patient_Medical_Record_id_blgrp FOREIGN KEY (id_blgrp) REFERENCES Blood_Group(id_blgrp);
ALTER TABLE     Patient_Medical_Record ADD     CONSTRAINT FK_Patient_Medical_Record_id_doc FOREIGN KEY (id_doc) REFERENCES Doctor(id_doc);
ALTER TABLE     Patient_Medical_Record ADD     CONSTRAINT FK_Patient_Medical_Record_id_gpsc FOREIGN KEY (id_gpsc) REFERENCES GPS_Coordinates(id_gpsc);
ALTER TABLE     Patient_Medical_Record ADD     CONSTRAINT FK_Patient_Medical_Record_id_addr FOREIGN KEY (id_addr) REFERENCES Address(id_addr);
ALTER TABLE     Doctor ADD     CONSTRAINT FK_Doctor_id_socdet FOREIGN KEY (id_socdet) REFERENCES Social_Details(id_socdet);
ALTER TABLE     Doctor ADD     CONSTRAINT FK_Doctor_id_gpsc FOREIGN KEY (id_gpsc) REFERENCES GPS_Coordinates(id_gpsc);
ALTER TABLE     GPS_Coordinates ADD     CONSTRAINT FK_GPS_Coordinates_id_medrec FOREIGN KEY (id_medrec) REFERENCES Patient_Medical_Record(id_medrec);
ALTER TABLE     GPS_Coordinates ADD     CONSTRAINT FK_GPS_Coordinates_id_doc FOREIGN KEY (id_doc) REFERENCES Doctor(id_doc);
ALTER TABLE     Appointement ADD     CONSTRAINT FK_Appointement_id_diag FOREIGN KEY (id_diag) REFERENCES Doctor_Diagnostic(id_diag);
ALTER TABLE     Appointement ADD     CONSTRAINT FK_Appointement_id_gpsc FOREIGN KEY (id_gpsc) REFERENCES GPS_Coordinates(id_gpsc);
ALTER TABLE     Appointement ADD     CONSTRAINT FK_Appointement_id_medrec FOREIGN KEY (id_medrec) REFERENCES Patient_Medical_Record(id_medrec);
ALTER TABLE     Appointement ADD     CONSTRAINT FK_Appointement_id_doc FOREIGN KEY (id_doc) REFERENCES Doctor(id_doc);
ALTER TABLE     Appointement ADD     CONSTRAINT FK_Appointement_id_addr FOREIGN KEY (id_addr) REFERENCES Address(id_addr);
ALTER TABLE     Medical_Site ADD     CONSTRAINT FK_Medical_Site_id_addr FOREIGN KEY (id_addr) REFERENCES Address(id_addr);
ALTER TABLE     Doctor_Diagnostic ADD     CONSTRAINT FK_Doctor_Diagnostic_id_medrec FOREIGN KEY (id_medrec) REFERENCES Patient_Medical_Record(id_medrec);
ALTER TABLE     Doctor_Diagnostic ADD     CONSTRAINT FK_Doctor_Diagnostic_id_doc FOREIGN KEY (id_doc) REFERENCES Doctor(id_doc);
ALTER TABLE     Imagery ADD     CONSTRAINT FK_Imagery_id_diag FOREIGN KEY (id_diag) REFERENCES Doctor_Diagnostic(id_diag);
ALTER TABLE     Numerical ADD     CONSTRAINT FK_Decimalal_id_diag FOREIGN KEY (id_diag) REFERENCES Doctor_Diagnostic(id_diag);
ALTER TABLE     practice ADD     CONSTRAINT FK_practice_id_doc FOREIGN KEY (id_doc) REFERENCES Doctor(id_doc);
ALTER TABLE     practice ADD     CONSTRAINT FK_practice_id_prtyp FOREIGN KEY (id_prtyp) REFERENCES Profession_Type(id_prtyp);
ALTER TABLE     belong ADD     CONSTRAINT FK_belong_id_medsite FOREIGN KEY (id_medsite) REFERENCES Medical_Site(id_medsite);
ALTER TABLE     belong ADD     CONSTRAINT FK_belong_id_doc FOREIGN KEY (id_doc) REFERENCES Doctor(id_doc);
ALTER TABLE     to_describe ADD     CONSTRAINT FK_describe_id_diag FOREIGN KEY (id_diag) REFERENCES Doctor_Diagnostic(id_diag);
ALTER TABLE     to_describe ADD     CONSTRAINT FK_describe_id_tags FOREIGN KEY (id_tags) REFERENCES Tags(id_tags);
ALTER TABLE     provide ADD     CONSTRAINT FK_provide_id_tags FOREIGN KEY (id_tags) REFERENCES Tags(id_tags);
ALTER TABLE     provide ADD     CONSTRAINT FK_provide_id_medsite FOREIGN KEY (id_medsite) REFERENCES Medical_Site(id_medsite);
ALTER TABLE     have_relatives_with ADD     CONSTRAINT FK_have_relatives_with_id_medrec_child FOREIGN KEY (id_medrec_child) REFERENCES Patient_Medical_Record(id_medrec);
ALTER TABLE     have_relatives_with ADD     CONSTRAINT FK_have_relatives_with_id_medrec_father FOREIGN KEY (id_medrec_father) REFERENCES Patient_Medical_Record(id_medrec);

